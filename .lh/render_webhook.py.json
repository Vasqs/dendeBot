{
  "sourceFile": "render_webhook.py",
  "activeCommit": 0,
  "commits": [
    {
      "activePatchIndex": 11,
      "patches": [
        {
          "date": 1725297857939,
          "content": "Index: \n===================================================================\n--- \n+++ \n"
        },
        {
          "date": 1725299745269,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,12 @@\n+# main.py\n+\n import asyncio\n import logging\n import os\n \n import uvicorn\n-from starlette.applications import Starlette\n+from starlette.app import App\n from starlette.requests import Request\n from starlette.responses import PlainTextResponse, Response\n from starlette.routing import Route\n \n@@ -15,8 +17,10 @@\n     filters,\n     MessageHandler,\n )\n \n+from bot import auto_answer  # Import the auto_answer function from your bot code\n+\n # Enable logging\n logging.basicConfig(\n     format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\", level=logging.INFO\n )\n@@ -30,57 +34,14 @@\n PORT = 8000\n TOKEN = \"API_KEY\"\"  # nosec B105\n \n \n-async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n-    \"\"\"Echo the user message.\"\"\"\n-    await update.message.reply_text(update.message.text)\n+async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n+    \"\"\"Handle incoming messages.\"\"\"\n+    message = update.message.text\n+    answer = auto_answer(message)\n+    if answer:\n+        await update.message.reply_text(answer)\n \n \n async def main() -> None:\n-    \"\"\"Set up PTB application and a web application for handling the incoming requests.\"\"\"\n-    application = (\n-        Application.builder().token(TOKEN).updater(None).build()\n-    )\n-\n-    # register handlers\n-    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))\n-\n-    # Pass webhook settings to telegram\n-    await application.bot.set_webhook(url=f\"{URL}/telegram\", allowed_updates=Update.ALL_TYPES)\n-\n-    # Set up webserver\n-    async def telegram(request: Request) -> Response:\n-        \"\"\"Handle incoming Telegram updates by putting them into the `update_queue`\"\"\"\n-        await application.update_queue.put(\n-            Update.de_json(data=await request.json(), bot=application.bot)\n-        )\n-        return Response()\n-\n-    async def health(_: Request) -> PlainTextResponse:\n-        \"\"\"For the health endpoint, reply with a simple plain text message.\"\"\"\n-        return PlainTextResponse(content=\"The bot is still running fine :)\")\n-\n-    starlette_app = Starlette(\n-        routes=[\n-            Route(\"/telegram\", telegram, methods=[\"POST\"]),\n-            Route(\"/healthcheck\", health, methods=[\"GET\"]),\n-        ]\n-    )\n-    webserver = uvicorn.Server(\n-        config=uvicorn.Config(\n-            app=starlette_app,\n-            port=PORT,\n-            use_colors=False,\n-            host=\"0.0.0.0\",  # NOTE: Render requires you to bind your webserver to 0.0.0.0\n-        )\n-    )\n-\n-    # Run application and webserver together\n-    async with application:\n-        await application.start()\n\\ No newline at end of file\n-        await webserver.serve()\n-        await application.stop()\n-\n-\n-if __name__ == \"__main__\":\n-    asyncio.run(main())\n+    \"\"\"Set up PTB application and a web application for\n\\ No newline at end of file\n"
        },
        {
          "date": 1725299754256,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,4 @@\n-# main.py\n-\n import asyncio\n import logging\n import os\n \n"
        },
        {
          "date": 1725299807320,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,5 +41,5 @@\n         await update.message.reply_text(answer)\n \n \n async def main() -> None:\n-    \"\"\"Set up PTB application and a web application for\n\\ No newline at end of file\n+    \"\"\"Set up PTB application and a web application for \"\"\"\n\\ No newline at end of file\n"
        },
        {
          "date": 1725299918967,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n # Define configuration constants\n URL = os.environ.get(\"https://dendebot.onrender.com/\")  # NOTE: We need to tell telegram where to reach our service\n PORT = 8000\n-TOKEN = \"API_KEY\"\"  # nosec B105\n+TOKEN = \"API_KEY\"  # nosec B105\n \n \n async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n     \"\"\"Handle incoming messages.\"\"\"\n"
        },
        {
          "date": 1725300015510,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import logging\n import os\n \n import uvicorn\n+import starlette\n from starlette.app import App\n from starlette.requests import Request\n from starlette.responses import PlainTextResponse, Response\n from starlette.routing import Route\n"
        },
        {
          "date": 1725300086280,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n+# main.py\n+\n import asyncio\n import logging\n import os\n \n import uvicorn\n-import starlette\n-from starlette.app import App\n from starlette.requests import Request\n from starlette.responses import PlainTextResponse, Response\n from starlette.routing import Route\n+from starlette.app import Starlette\n \n from telegram import Update\n from telegram.ext import (\n     Application,\n@@ -30,9 +31,9 @@\n \n # Define configuration constants\n URL = os.environ.get(\"https://dendebot.onrender.com/\")  # NOTE: We need to tell telegram where to reach our service\n PORT = 8000\n-TOKEN = \"API_KEY\"  # nosec B105\n+TOKEN = \"API_KEY\"\"  # nosec B105\n \n \n async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n     \"\"\"Handle incoming messages.\"\"\"\n@@ -42,5 +43,51 @@\n         await update.message.reply_text(answer)\n \n \n async def main() -> None:\n-    \"\"\"Set up PTB application and a web application for \"\"\"\n\\ No newline at end of file\n+    \"\"\"Set up PTB application and a web application for handling the incoming requests.\"\"\"\n+    application = (\n+        Application.builder().token(TOKEN).updater(None).build()\n+    )\n+\n+    # register handlers\n+    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))\n+\n+    # Pass webhook settings to telegram\n+    await application.bot.set_webhook(url=f\"{URL}/telegram\", allowed_updates=Update.ALL_TYPES)\n+\n+    # Set up webserver\n+    async def telegram(request: Request) -> Response:\n+        \"\"\"Handle incoming Telegram updates by putting them into the `update_queue`\"\"\"\n+        await application.update_queue.put(\n+            Update.de_json(data=await request.json(), bot=application.bot)\n+        )\n+        return Response()\n+\n+    async def health(_: Request) -> PlainTextResponse:\n+        \"\"\"For the health endpoint, reply with a simple plain text message.\"\"\"\n+        return PlainTextResponse(content=\"The bot is still running fine :)\")\n+\n+    starlette_app = Starlette(\n+        routes=[\n+            Route(\"/telegram\", telegram, methods=[\"POST\"]),\n+            Route(\"/healthcheck\", health, methods=[\"GET\"]),\n+        ]\n+    )\n+    webserver = uvicorn.Server(\n+        config=uvicorn.Config(\n+            app=starlette_app,\n+            port=PORT,\n+            use_colors=False,\n+            host=\"0.0.0.0\",  # NOTE: Render requires you to bind your webserver to 0.0.0.0\n+        )\n+    )\n+\n+    # Run application and webserver together\n+    async with application:\n+        await application.start()\n+        await webserver.serve()\n+        await application.stop()\n+\n+\n+if __name__ == \"__main__\":\n+    asyncio.run(main())\n\\ No newline at end of file\n"
        },
        {
          "date": 1725300093814,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \n # Define configuration constants\n URL = os.environ.get(\"https://dendebot.onrender.com/\")  # NOTE: We need to tell telegram where to reach our service\n PORT = 8000\n-TOKEN = \"API_KEY\"\"  # nosec B105\n+TOKEN = \"API_KEY\"  # nosec B105\n \n \n async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n     \"\"\"Handle incoming messages.\"\"\"\n"
        },
        {
          "date": 1725300132144,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,13 @@\n-# main.py\n-\n import asyncio\n import logging\n import os\n \n import uvicorn\n+from starlette.applications import Starlette\n from starlette.requests import Request\n from starlette.responses import PlainTextResponse, Response\n from starlette.routing import Route\n-from starlette.app import Starlette\n \n from telegram import Update\n from telegram.ext import (\n     Application,\n@@ -17,10 +15,8 @@\n     filters,\n     MessageHandler,\n )\n \n-from bot import auto_answer  # Import the auto_answer function from your bot code\n-\n # Enable logging\n logging.basicConfig(\n     format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\", level=logging.INFO\n )\n@@ -31,17 +27,14 @@\n \n # Define configuration constants\n URL = os.environ.get(\"https://dendebot.onrender.com/\")  # NOTE: We need to tell telegram where to reach our service\n PORT = 8000\n-TOKEN = \"API_KEY\"  # nosec B105\n+TOKEN = \"API_KEY\"\"  # nosec B105\n \n \n-async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n-    \"\"\"Handle incoming messages.\"\"\"\n-    message = update.message.text\n-    answer = auto_answer(message)\n-    if answer:\n-        await update.message.reply_text(answer)\n+async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n+    \"\"\"Echo the user message.\"\"\"\n+    await update.message.reply_text(update.message.text)\n \n \n async def main() -> None:\n     \"\"\"Set up PTB application and a web application for handling the incoming requests.\"\"\"\n@@ -49,9 +42,9 @@\n         Application.builder().token(TOKEN).updater(None).build()\n     )\n \n     # register handlers\n-    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))\n+    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))\n \n     # Pass webhook settings to telegram\n     await application.bot.set_webhook(url=f\"{URL}/telegram\", allowed_updates=Update.ALL_TYPES)\n \n"
        },
        {
          "date": 1725300139106,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n \n # Define configuration constants\n URL = os.environ.get(\"https://dendebot.onrender.com/\")  # NOTE: We need to tell telegram where to reach our service\n PORT = 8000\n-TOKEN = \"API_KEY\"\"  # nosec B105\n+TOKEN = \"API_KEY\"  # nosec B105\n \n \n async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n     \"\"\"Echo the user message.\"\"\"\n"
        },
        {
          "date": 1725300198199,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from starlette.requests import Request\n from starlette.responses import PlainTextResponse, Response\n from starlette.routing import Route\n \n-from telegram import Update\n+from telegram import update\n from telegram.ext import (\n     Application,\n     ContextTypes,\n     filters,\n"
        },
        {
          "date": 1725300203746,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from starlette.requests import Request\n from starlette.responses import PlainTextResponse, Response\n from starlette.routing import Route\n \n-from telegram import update\n+from telegram import Update\n from telegram.ext import (\n     Application,\n     ContextTypes,\n     filters,\n"
        }
      ],
      "date": 1725297857939,
      "name": "Commit-0",
      "content": "import asyncio\nimport logging\nimport os\n\nimport uvicorn\nfrom starlette.applications import Starlette\nfrom starlette.requests import Request\nfrom starlette.responses import PlainTextResponse, Response\nfrom starlette.routing import Route\n\nfrom telegram import Update\nfrom telegram.ext import (\n    Application,\n    ContextTypes,\n    filters,\n    MessageHandler,\n)\n\n# Enable logging\nlogging.basicConfig(\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\", level=logging.INFO\n)\n# set higher logging level for httpx to avoid all GET and POST requests being logged\nlogging.getLogger(\"httpx\").setLevel(logging.WARNING)\n\nlogger = logging.getLogger(__name__)\n\n# Define configuration constants\nURL = os.environ.get(\"https://dendebot.onrender.com/\")  # NOTE: We need to tell telegram where to reach our service\nPORT = 8000\nTOKEN = \"API_KEY\"\"  # nosec B105\n\n\nasync def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:\n    \"\"\"Echo the user message.\"\"\"\n    await update.message.reply_text(update.message.text)\n\n\nasync def main() -> None:\n    \"\"\"Set up PTB application and a web application for handling the incoming requests.\"\"\"\n    application = (\n        Application.builder().token(TOKEN).updater(None).build()\n    )\n\n    # register handlers\n    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))\n\n    # Pass webhook settings to telegram\n    await application.bot.set_webhook(url=f\"{URL}/telegram\", allowed_updates=Update.ALL_TYPES)\n\n    # Set up webserver\n    async def telegram(request: Request) -> Response:\n        \"\"\"Handle incoming Telegram updates by putting them into the `update_queue`\"\"\"\n        await application.update_queue.put(\n            Update.de_json(data=await request.json(), bot=application.bot)\n        )\n        return Response()\n\n    async def health(_: Request) -> PlainTextResponse:\n        \"\"\"For the health endpoint, reply with a simple plain text message.\"\"\"\n        return PlainTextResponse(content=\"The bot is still running fine :)\")\n\n    starlette_app = Starlette(\n        routes=[\n            Route(\"/telegram\", telegram, methods=[\"POST\"]),\n            Route(\"/healthcheck\", health, methods=[\"GET\"]),\n        ]\n    )\n    webserver = uvicorn.Server(\n        config=uvicorn.Config(\n            app=starlette_app,\n            port=PORT,\n            use_colors=False,\n            host=\"0.0.0.0\",  # NOTE: Render requires you to bind your webserver to 0.0.0.0\n        )\n    )\n\n    # Run application and webserver together\n    async with application:\n        await application.start()\n        await webserver.serve()\n        await application.stop()\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())"
    }
  ]
}
